1.简介
Scrapy是一套基于Twisted的异步处理框架，是纯Python实现的爬虫框架，
用户只需要定制开发几个模块就可以轻松地实现一个爬虫，用来抓取网页内容或者各种图片。
Scrapy运行于Linux/Windows/MacOS等多种环境，具有速度快、扩展性强、使用简便等特点。

Scrapy可以在本地运行，也能部署到云端实现真正的生产级数据采集系统。
Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试


2.Scrapy工作流
Scrapy工作流也叫作“运行流程”或叫作“数据处理流程”，
整个数据处理流程由Scrapy引擎进行控制，其主要的运行步骤如下：
①Scrapy引擎从调度器中取出一个链接（URL）用于接下来的抓取；
②Scrapy引擎把URL封装成一个请求并传给下载器；
③下载器把资源下载下来，并封装成应答包；
④爬虫解析应答包；
⑤如果解析出的是项目，则交给项目管道进行进一步的处理；
⑥如果解析出的是链接（URL），则把URL交给调度器等待抓取。

3.XPath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，
可用来在XML和HTML文档中对元素和属性进行遍历。
简单来说，网页数据是以超文本的形式来呈现的，想要获取里面的数据，
就要按照一定的规则来进行数据的处理，这种规则就叫做XPath。
XPath提供了超过100个内建函数，几乎所有要定位的节点都可以用XPath来定位，
在做网络爬虫时可以使用XPath提取所需的信息。

总结
 xpath('xpath表达式')   返回列表，通过层级定位：
 1./表示从根节点开始,也可表示一个层级，//表示多个层级
 2.tree.xpath('//div')#表示可从任意位置定位标签
 3.属性定位 //tag[@attrName = "attrValue"]
 4.索引定位,tree.xpath('//div[@class="top-nav"]/ul/li[1]')#在ul下有多个li,从1开始
 5.*任意元素
 取文本：/text()获得直系内容  //text()获得非直系的内容
 取属性：/@attrName



1．基本术语
XML文档通常可以被看作一棵节点树。在XML中，有元素、属性、文本、命名空间、处理指令、
注释以及文档节点等七种类型的节点，其中，元素节点是最常用的节点。

<html>是文档节点，
<title>BigData Software</title>是元素节点，
class="title"是属性节点。
（1）父节点：每个元素和属性都有一个父节点。
例如，html节点是head节点和p节点的父节点；
head节点是title节点的父节点；

（2）子节点：每一个元素节点的下一个直接节点是该元素节点的子节点。
每个元素节点可以有零个、一个或多个子节点。例如，title节点是head节点的子节点。

（3）兄弟节点：拥有相同父节点的节点，就是兄弟节点。
例如，第二个p节点中的三个a节点就是兄弟节点；head节点和中间三个p节点就是兄弟节点；
title节点和a节点就不是兄弟节点，因为不是同一个父节点。

（4）祖先节点：节点的父节点以及父节点的父节点等，称作“祖先节点”。
例如，html节点和head节点是title节点的祖先节点。

（5）后代节点：节点的子节点以及子节点的子节点等，称作“后代节点”。
例如，html节点的后代节点有head、title、b、p以及a节点。

2．基本语法
XML/HTML文档是由标签构成的，所有的标签都有很强的层级关系。基于这种层级关系，
在XPath语法中，我们直接使用路径来选取，再加上适当的谓语或函数进行指定，
就可以准确定位到指定的节点。
（1）节点选取
XPath选取节点时，是沿着路径到达目标
表达式         描述
nodename    选取nodename节点的所有子节点
/           从根节点出发选取
//          从当前文档选取所有匹配的节点，而不考虑它们的位置
@           选取属性
.           选取当前节点
..          选取当前节点的父节点

“/”可以理解为绝对路径，需要从根节点开始；“./”则是相对路径，可以从当前节点开始；
“../”则是先返回上一节点，从上一节点开始。这与普通计算机的文件系统类似。
---------------------------------------------
需要用到lxml中的etree库,etree库使用xpth解析
tree = etree.HTML(page_text)
r = tree.xpath('xpath表达式')

html.xpath('body')的输出结果不是像HTML里面那样显示的标签，
其实这就是我们所要的元素，只不过我们还需要再进行一步操作，
也就是使用etree中的.tostring()方法将其进行转换。
此外，html.xpath('body')的输出结果是一个列表，
因此，我们可以使用for循环来遍历列表，

“//”可以进行跳级搜索，“/”只能在本级上进行搜索，不能跳跃。
            （1）逐级搜索
            html_data = html.xpath('/html/body/p/a')
            （2）跳级搜索
            html_data = html.xpath('//a')


（2）谓语
直接使用前面介绍的方法可以定位到多数我们需要的节点，
但是有时候我们需要查找某个特定的节点或者包含某个指定值的节点，
就要用到谓语。谓语是被嵌在方括号中的。
p[1],p[@class=""] 索引，属性定位

（3）函数
XPath中提供超过100个内建函数用于字符串值、数值、日期和时间
比较序列处理等操作，极大地方便了我们定位获取所需要的信息。
函数              示例                                说明
contains()      //p[contains(@class,"bigdata")]     选取所有class属性包含bigdata的p标签
starts-with()   //a[starts-with(@class,"bigdata")]  选取所有class属性以bigdata开头的a标签
ends-with()     //a[ends-with(@class,"Flink")]      选取所有class属性以Flink结尾的a标签
text()          //a[contains(@class,"Hadoop")]/text()   获取所有class属性包含Hadoop的a标签的文本内容


