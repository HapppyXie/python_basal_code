BeautifulSoup简介

BeautifulSoup提供一些简单的、Python式的函数来处理导航、搜索、修改分析树等。BeautifulSoup是一个工具箱，
通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。
BeautifulSoup自动将输入文档转换为Unicode编码，输出文档转换为UTF-8编码。BeautifulSoup3已经停止开发，
目前推荐使用BeautifulSoup4，不过它已经被移植到bs4当中了

解析器             用法                                          优点                  缺点
Python标准库       BeautifulSoup(markup,'html.parser   ')      执行熟读适中              文档容错能力差
lxml的HTMl解析器    BeautifulSoup(markup,'lxml')               速度快文档容错能力强         需安装c语言库
lxml的XML解析器     BeautifulSoup(markup, "lxml-xml") BeautifulSoup(markup,"xml")
                                                              速度快唯一支持XML的解析器    需要安装C语言库
html5lib          BeautifulSoup(markup, "html5lib")            兼容性好以浏览器的方式解析文档生成HTML5格式的文档
                                                                                        速度慢，不依赖外部扩展
BeautifulSoup四大对象:
  BeautifulSoup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象，
  所有对象可以归纳为4种：Tag、NavigableString、BeautifulSoup、Comment
    Tag标签定位

    NavigableString对象用于操纵字符串。在网页解析时，已经得到了标签的内容以后，
    如果我们想获取标签内部的文字，则可以使用.string方法，其返回值就是一个NavigableString对象

    BeautifulSoup对象表示的是一个文档的全部内容，大部分时候，可以把它当作Tag对象，是一个特殊的Tag

    Comment对象是一种特殊类型的NavigableString对象，输出的内容不包括注释符号。如果它处理不好，
    可能会对文本处理造成意想不到的麻烦


(一)遍历文档树就是从根节点html标签开始遍历，直到找到目标元素为止:
  1.直接子节点(下一级节点)
    .contents属性
    Tag对象的.contents属性可以将某个Tag的子节点以列表的方式输出，
    当然列表会允许用索引的方式来获取列表中的元素。
 2.所有子孙节点
    在获取所有子孙节点时，可以使用.descendants属性，
    与Tag对象的.children和.contents仅包含Tag对象的直接子节点不同，
    该属性是将Tag对象的所有子孙结,在执行结果中可以发现，所有的节点都被打印出来了，
    先生成最外层的html标签，其次从head标签一个个剥离，依此类推

 3.节点内容点进行递归循环，然后生成生成器
    （1）Tag对象内没有标签的情况
    （2）Tag对象内有一个标签的情况
    （3）Tag对象内有多个标签的情况
        如果Tag包含了多个子节点，Tag就无法确定.string应该调用哪个子节点的内容，
        因此.string的输出结果是None。这时应该使用.strings属性或.stripped_strings属性，

        它们获得的都是一个生成器
 4.直接父节点(上一级节点)
    使用Tag对象的.parent属性可以获得父节点，
    使用Tag对象的.parents属性可以获得从父到根的所有节点
    Tag对象的.parents属性，得到的也是一个生成器

 5.兄弟节点(同一级别的节点)
    可以使用Tag对象的.next_sibling和.previous_sibling属性分别获取下一个兄弟结点和获取上一个兄弟结点。
    需要注意的是，实际文档中Tag的.next_sibling和.previous_sibling属性通常是字符串或空白，
    因为空白或者换行也可以被视作一个节点，所以得到的结果可能是空白或者换行

 6.全部兄弟节点(同以层级的节点)
   可以使用Tag对象的.next_siblings和.previous_siblings属性对当前的兄弟结点迭代输出

 7.前后节点(不分层次)
   Tag对象的.next_element和.previous_element属性，用于获得不分层次的前后元素
    换行，空格也被视为一个节点

 8. 所有前后节点(不分层次)
    使用Tag对象的.next_elements和.previous_elements属性可以向前或向后解析文档内容

(二)搜索文档树
    搜索文档树是通过指定标签名来搜索元素，另外还可以通过指定标签的属性值来精确定位某个节点元素，
    最常用的两个方法就是find()和find_all()，这两个方法在BeatifulSoup和Tag对象上都可以被调用

1.find_all( name , attrs , recursive , text , **kwargs )
    find_all()方法搜索当前Tag的所有Tag子节点，并判断是否符合过滤器的条件
    find_all()的返回值是一个Tag组成的列表，方法调用非常灵活，所有的参数都是可选的

    (1)name参数
    ①传入字符串
    name参数可以查找所有名字为name的Tag，字符串对象会被自动忽略
    ②传入正则表达式
    如果传入正则表达式作为参数，BeautifulSoup会通过正则表达式的match()来匹配内容.
    ③传入列表
    如果传入参数是列表，BeautifulSoup会将与列表中任一元素匹配的内容返回
    ④传入True
    传入True可以找到所有的标签。
    ⑤传入方法
    如果没有合适过滤器，那么还可以定义一个方法，方法只接受一个元素参数，
    如果这个方法返回True，表示当前元素匹配并且被找到，如果不是则返回False。
    下面方法对当前元素进行校验，如果包含class属性却不包含id属性，那么将返回True

    （2）keyword参数
    通过name参数是搜索Tag的标签类型名称，如a、head、title等。
    如果要通过标签内属性的值来搜索，要通过键值对的形式来指定
    使用多个指定名字的参数可以同时过滤Tag的多个属性
    如果指定的key是Python的关键词，则后面需要加下划线

    (3)text参数
    text参数的作用和name参数类似，但是text参数的搜索范围是文档中的字符串内容（不包含注释），
    并且是完全匹配，当然也接受正则表达式、列表、True

    (4)limit参数
    可以通过limit参数来限制使用name参数或者attrs参数过滤出来的条目的数量
    控制返回多少条成功匹配的信息

    （5）recursive(回归的，递归的)参数
    调用Tag的find_all()方法时，BeautifulSoup会检索当前Tag的所有子孙节点，
    如果只想搜索Tag的直接子节点，可以使用参数recursive=False

2.find()
    find()与find_all()的区别是，find_all()将所有匹配的条目组合成一个列表，
    而find()仅返回第一个匹配的条目，除此以外，二者的用法都相同


(三)CSS选择器
 BeautifulSoup支持大部分的CSS选择器，在Tag或BeautifulSoup对象的select()方法中传入字符串参数，
 即可使用CSS选择器的语法找到标签,返回匹配信息组成的列表
    ①通过标签名查找    print(soup.select('title'))
    ②通过类名查找      print(soup.select('.software'))
    ③通过id名查找     print(soup.select('#link1'))
    ④组合查找
        print(soup.select('p #link1'))
        print(soup.select("head > title"))  >表示层级  空隔表示多个层级
        print(soup.select("p > a:nth-of-type(2)"))   p标签下，第二个a标签
    ⑤属性查找
    查找时还可以加入属性元素，属性需要用中括号括起来，
    注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。

    .attrs  获得属性




